name: Test

on:
  push:
    branches:
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0" # every week (for --pre release tests)

jobs:
  check-manifest:
    name: Check Manifest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6
      - run: uvx check-manifest

  pyinstaller_build:
    name: Build (PyInstaller)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v4
    - uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        activate-environment: true
        python-version: "3.10"
#    - name: Install Python 3.10
#      run: uv python install 3.10
    - uses: pyvista/setup-headless-display-action@v3
      with:
        qt: true

    - name: Check secrets availability
      shell: bash
      run: |
        if [ -n '${{ secrets.APPLE_APPLICATION_CERTIFICATE_BASE64 }}' ] && \
           [ -n '${{ secrets.APPLE_INSTALLER_CERTIFICATE_PASSWORD }}' ] && \
           [ -n '${{ secrets.APPLE_NOTARIZATION_USERNAME }}' ] && \
           [ -n '${{ secrets.APPLE_NOTARIZATION_PASSWORD }}' ] && \
           [ -n '${{ secrets.TEMP_KEYCHAIN_PASSWORD }}' ]; then
            echo "SIGNING_SECRETS_AVAILABLE=1" >> $GITHUB_ENV
        fi

    # instructions taken from
    # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development#add-a-step-to-your-workflow
    - name: Load signing certificate (MacOS)
      shell: bash -el {0}
      # We only sign pushes to main, nightlies, RCs and final releases
      if: runner.os == 'macOS'
      run: |
        # create variables
        APPLICATION_CERTIFICATE_PATH="$RUNNER_TEMP/application_developer_cert.p12"
        KEYCHAIN_PATH="$RUNNER_TEMP/installer-signing.keychain-db"

        # import certificate and provisioning profile from secrets
        echo -n "${{ secrets.APPLE_APPLICATION_CERTIFICATE_BASE64 }}" | /usr/bin/base64 --decode > $APPLICATION_CERTIFICATE_PATH

        # create temporary keychain
        security create-keychain -p "${{ secrets.TEMP_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "${{ secrets.TEMP_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $APPLICATION_CERTIFICATE_PATH -P ${{ secrets.APPLE_INSTALLER_CERTIFICATE_PASSWORD }} -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # export identity name
        signing_identity=$(security find-identity $KEYCHAIN_PATH | grep -m 1 -o '"Developer ID Installer.*"' | tr -d '"')
        notarization_identity=$(security find-identity $KEYCHAIN_PATH | grep -m 1 -o '"Developer ID Application.*"' | tr -d '"')

        echo "CONSTRUCTOR_SIGNING_IDENTITY=${signing_identity}" >> $GITHUB_ENV
        echo "CONSTRUCTOR_NOTARIZATION_IDENTITY=${notarization_identity}" >> $GITHUB_ENV

        # The conda environment might contain a totally different codesign
        # which would clobber the Apple's codesign (the one we need)
        _codesign=$(which codesign)
        if [[ $_codesign =~ ${CONDA_PREFIX}.* ]]; then
          mv "${_codesign}" "${_codesign}.in_conda_env"
        fi

    - name: Install dependencies
      run: | 
        uv pip install pyinstaller
        uv pip install ".[pyqt6]"
        

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # package the app
        pyinstaller --noconfirm --clean package/image2image.spec
    - name: Build (Windows) - Package
      if: matrix.os == 'windows-latest'
      run: |
        # rename file
        python scripts/package_app_win_zip.py
        # update filename
        $filename = python -c "from pathlib import Path; print(list((Path.cwd() / 'dist').glob('image2image*.zip'))[0].name)"
        echo "I2I_PACKAGE_NAME=$filename" >> $GITHUB_ENV

    - name: Build (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        # package the app
        pyinstaller --noconfirm --clean package/image2image.spec

    - name: Build (MacOS) - Sign
      if: matrix.os == 'macos-latest' && env.SIGNING_SECRETS_AVAILABLE
      run: |
        # codesign the app
        codesign --deep --force --options=runtime --entitlements ./package/macos-package/entitlements.plist --sign secrets.MACOS_SIGN_KEY --timestamp ./dist/image2image.app

    - name: Build (MacOS) - Package
      if: matrix.os == 'macos-latest'
      run: |
        # create a disk image
        mkdir -p dist/dmg
        # link the app to the Applications folder
        ln -s /Applications dist/dmg/Applications
        mv dist/image2image.app dist/dmg
        # create dmg file
        hdiutil create -volname "image2image" -srcfolder ./dist/dmg -ov -format UDZO ./dist/image2image.dmg
        # rename file
        python scripts/package_app_macos_rename.py
        # update filename
        filename=$(python -c 'from pathlib import Path; print(list((Path.cwd() / "dist").glob("image2image*.dmg"))[0].name)')
        echo "I2I_PACKAGE_NAME=$filename" >> $GITHUB_ENV
        

    - name: Build (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # package the app
        pyinstaller --noconfirm --clean package/image2image.spec

    - name: Build (Linux) - Package
      if: matrix.os == 'ubuntu-latest'
      run: |
        # tar.gz the app
        tar czf dist/image2image.tar.gz dist/image2image
        # rename file
        python scripts/package_app_linux_rename.py
        # update filename
        filename=$(python -c 'from pathlib import Path; print(list((Path.cwd() / "dist").glob("image2image*.tar.gz"))[0].name)')
        echo "I2I_PACKAGE_NAME=$filename" >> $GITHUB_ENV

    - name: Check filename availability
      shell: bash
      run: |
        if [ -n '${{ secrets.I2I_PACKAGE_NAME }}' ]; then
            echo "I2I_FILENAME_AVAILABLE=1" >> $GITHUB_ENV
        fi

    - uses: actions/upload-artifact@v4
      if: success() && env.I2I_FILENAME_AVAILABLE == '1'
      with:
        compression-level: 0  # no compression
        name: '${{ env.I2I_PACKAGE_NAME }}'
        path: |
          dist/image2image*.zip
          dist/image2image*.dmg
          dist/image2image*.tar.gz
          

  test:
    name: Test
    uses: pyapp-kit/workflows/.github/workflows/test-pyrepo.yml@v2
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}
    with:
      os: ${{ matrix.platform }}
      python-version: ${{ matrix.python-version }}
      qt: ${{ matrix.backend }}
      pip-install-pre-release: ${{ github.event_name == 'schedule' }}
      extras: 'test,2d'
      coverage-upload: artifact
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        backend: [pyqt5, pyside2, pyqt6]
        exclude:
          # Abort (core dumped) on linux pyqt6, unknown reason
          - platform: ubuntu-latest
            backend: pyqt6
          # lack of wheels for pyside2 on MacOS
          - platform: macos-latest
            backend: pyside2
          # lack of wheels for pyside2/py3.11
          - python-version: "3.9"
            backend: pyside2
          - python-version: "3.10"
            backend: pyside2
          - python-version: "3.11"
            backend: pyside2
          - python-version: "3.12"
            backend: pyside2
          - python-version: "3.12"
            backend: pyqt5
          # dask/xarray issues
          - python-version: "3.12"
            backend: pyqt6
            platform: macos-latest
          - python-version: "3.12"
            backend: pyqt6
            platform: windows-latest
          - python-version: "3.12"
            backend: pyside6
            platform: windows-latest
          # super slow
          - python-version: "3.13"
            backend: pyqt6
            platform: windows-latest
        include:
#          - python-version: "3.13"
#            platform: windows-latest
#            backend: "pyqt6"
#          - python-version: "3.13"
#            platform: ubuntu-latest
#            backend: "pyqt6"
          - python-version: "3.10"
            platform: macos-latest
            backend: "'pyside6<6.8'"
          - python-version: "3.11"
            platform: macos-latest
            backend: "'pyside6<6.8'"
          - python-version: "3.10"
            platform: windows-latest
            backend: "'pyside6<6.8'"
          # legacy Qt
          - python-version: 3.9
            platform: ubuntu-latest
            backend: "pyqt5==5.12.*"
          - python-version: 3.9
            platform: ubuntu-latest
            backend: "pyqt5==5.13.*"
          - python-version: 3.9
            platform: ubuntu-latest
            backend: "pyqt5==5.14.*"

  # now add another job to combine and upload the coverage
  upload_coverage:
    if: always()
    needs: [test]
    uses: pyapp-kit/workflows/.github/workflows/upload-coverage.yml@v2
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}

  # before we submit to PyPi, let's test that it gets built correctly and we can submit to TestPyPi
  deploy_test:
    name: Deploy to PyPI (test)
    needs: [test, check-manifest]
    if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: install
        run: |
          git tag
          python -m pip install --upgrade pip
          pip install -U pip build twine
          python -m build
          twine check dist/*
          ls -lh dist

      - name: Build and publish
        run: twine upload --repository testpypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}

  deploy:
    name: Deploy
    needs: deploy_test
    if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: install
        run: |
          git tag
          pip install -U pip build twine
          python -m build
          twine check dist/*
          ls -lh dist

      - name: Build and publish
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true