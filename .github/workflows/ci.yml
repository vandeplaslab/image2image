name: Test

on:
  push:
    branches:
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0" # every week (for --pre release tests)

jobs:
  check-manifest:
    name: Check Manifest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6
      - run: uvx check-manifest

  pyinstaller_build:
    name: Build (PyInstaller)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v4
    - uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        activate-environment: true
        python-version: "3.10"
    - name: Install Python 3.10
      run: uv python install 3.10
    - uses: pyvista/setup-headless-display-action@v3
      with:
        qt: true
    - name: Install dependencies
      run: | 
        uv pip install pyinstaller
        uv pip install ".[pyqt6]"
    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # package the app
        pyinstaller --noconfirm --clean package/windows-pyinstaller/image2image.spec
        # zip into a single file
        python package/windows-pyinstaller/zip.py

    - name: Build (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        # package the app
        pyinstaller --noconfirm --clean package/macos-pyinstaller/image2image.spec
        # codesign the app
        codesign --deep --force --options=runtime --entitlements ./entitlements.plist --sign secrets.MACOS_SIGN_KEY --timestamp ./dist/image2image.app
        # create a disk image
        mkdir -p dist/dmg
        # link the app to the Applications folder
        ln -s /Applications dist/dmg/Applications
        mv dist/image2image.app dist/dmg
        # create dmg file
        hdiutil create -volname "image2image" -srcfolder ./dist/dmg -ov -format UDZO ./dist/image2image.dmg
        # rename file
        python scripts/rename_app_macos.py

#    - name: Build (Linux)
#      if: matrix.os == 'ubuntu-latest'
#      run: |
#        # package the app
#        pyinstaller --noconfirm --clean package/windows-pyinstaller/image2image.spec
#        # create a tarball
#        tar -czf dist/image2image.tar.gz dist/image2image
#        rm -rf dist/image2image
        

    - uses: actions/upload-artifact@v4
      with:
        path: dist/*

  test:
    name: Test
    uses: pyapp-kit/workflows/.github/workflows/test-pyrepo.yml@v2
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}
    with:
      os: ${{ matrix.platform }}
      python-version: ${{ matrix.python-version }}
      qt: ${{ matrix.backend }}
      pip-install-pre-release: ${{ github.event_name == 'schedule' }}
      extras: 'test,2d'
      coverage-upload: artifact
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        backend: [pyqt5, pyside2, pyqt6]
        exclude:
          # Abort (core dumped) on linux pyqt6, unknown reason
          - platform: ubuntu-latest
            backend: pyqt6
          # lack of wheels for pyside2 on MacOS
          - platform: macos-latest
            backend: pyside2
          # lack of wheels for pyside2/py3.11
          - python-version: "3.9"
            backend: pyside2
          - python-version: "3.10"
            backend: pyside2
          - python-version: "3.11"
            backend: pyside2
          - python-version: "3.12"
            backend: pyside2
          - python-version: "3.12"
            backend: pyqt5
          # dask/xarray issues
          - python-version: "3.12"
            backend: pyqt6
            platform: macos-latest
          - python-version: "3.12"
            backend: pyqt6
            platform: windows-latest
          - python-version: "3.12"
            backend: pyside6
            platform: windows-latest
          # super slow
          - python-version: "3.13"
            backend: pyqt6
            platform: windows-latest
        include:
#          - python-version: "3.13"
#            platform: windows-latest
#            backend: "pyqt6"
#          - python-version: "3.13"
#            platform: ubuntu-latest
#            backend: "pyqt6"
          - python-version: "3.10"
            platform: macos-latest
            backend: "'pyside6<6.8'"
          - python-version: "3.11"
            platform: macos-latest
            backend: "'pyside6<6.8'"
          - python-version: "3.10"
            platform: windows-latest
            backend: "'pyside6<6.8'"
          # legacy Qt
          - python-version: 3.9
            platform: ubuntu-latest
            backend: "pyqt5==5.12.*"
          - python-version: 3.9
            platform: ubuntu-latest
            backend: "pyqt5==5.13.*"
          - python-version: 3.9
            platform: ubuntu-latest
            backend: "pyqt5==5.14.*"

  # now add another job to combine and upload the coverage
  upload_coverage:
    if: always()
    needs: [test]
    uses: pyapp-kit/workflows/.github/workflows/upload-coverage.yml@v2
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}

  # before we submit to PyPi, let's test that it gets built correctly and we can submit to TestPyPi
  deploy_test:
    name: Deploy to PyPI (test)
    needs: [test, check-manifest]
    if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: install
        run: |
          git tag
          python -m pip install --upgrade pip
          pip install -U pip build twine
          python -m build
          twine check dist/*
          ls -lh dist

      - name: Build and publish
        run: twine upload --repository testpypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}

  deploy:
    name: Deploy
    needs: deploy_test
    if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: install
        run: |
          git tag
          pip install -U pip build twine
          python -m build
          twine check dist/*
          ls -lh dist

      - name: Build and publish
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true