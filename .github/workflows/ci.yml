name: Test

on:
  push:
    branches:
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0" # every week (for --pre release tests)

jobs:
  check-manifest:
    name: Check Manifest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6
      - run: uvx check-manifest

  pyinstaller_build:
    name: Build (PyInstaller)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest] #, windows-latest, ubuntu-latest]

    steps:
    - uses: gerlero/brew-install@v1
      if: matrix.os == 'macos-latest'
      with:
        packages: create-dmg

    - uses: actions/checkout@v4
    - uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        activate-environment: true
        python-version: "3.10"
    - uses: pyvista/setup-headless-display-action@v3
      with:
        qt: true

    - name: Check secrets availability
      shell: bash
      run: |
        if [ -n '${{ secrets.APPLE_APPLICATION_CERTIFICATE_BASE64 }}' ] && \
           [ -n '${{ secrets.APPLE_INSTALLER_CERTIFICATE_BASE64 }}' ]   && \
           [ -n '${{ secrets.APPLE_INSTALLER_CERTIFICATE_PASSWORD }}' ] && \
           [ -n '${{ secrets.APPLE_NOTARIZATION_USERNAME }}' ] && \
           [ -n '${{ secrets.APPLE_NOTARIZATION_PASSWORD }}' ] && \
           [ -n '${{ secrets.TEMP_KEYCHAIN_PASSWORD }}' ]; then
            echo "SIGNING_SECRETS_AVAILABLE=1" >> $GITHUB_ENV
        fi

    - name: Install dependencies
      run: | 
        uv pip install pyinstaller
        uv pip install ".[pyqt6]"
        

#    - name: Build (Windows)
#      if: matrix.os == 'windows-latest'
#      run: |
#        # package the app
#        pyinstaller --noconfirm --clean package/image2image.spec
#    - name: Build (Windows) - Package
#      if: matrix.os == 'windows-latest'
#      run: |
#        # rename file
#        python scripts/package_app_win_zip.py
#        # update filename
#        $filename = python -c "from pathlib import Path; print(list((Path.cwd() / 'dist').glob('image2image*.zip'))[0].name)"
#        echo "I2I_PACKAGE_NAME=$filename" >> $Env:GITHUB_ENV

#    - name: Build (Linux)
#      if: matrix.os == 'ubuntu-latest'
#      run: |
#        # package the app
#        pyinstaller --noconfirm --clean package/image2image.spec
#
#    - name: Build (Linux) - Package
#      if: matrix.os == 'ubuntu-latest'
#      run: |
#        # tar.gz the app
#        tar czf dist/image2image.tar.gz dist/image2image
#        # rename file
#        python scripts/package_app_linux_rename.py
#        # update filename
#        filename=$(python -c 'from pathlib import Path; print(list((Path.cwd() / "dist").glob("image2image*.tar.gz"))[0].name)')
#        echo "I2I_PACKAGE_NAME=$filename" >> $GITHUB_ENV

    - name: Build (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        # package the app
        pyinstaller --noconfirm --clean package/image2image.spec
    - name: Build (MacOS) - Check
      if: matrix.os == 'macos-latest'
      run: |
        # list all files in the dist folder
        echo "Listing files in dist folder:"
        ls -lh dist
        # check if the file exists
        if [ -f dist/image2image.app ]; then
            echo "I2I_FILE_AVAILABLE=1" >> $GITHUB_ENV
        else
            echo "I2I_FILE_AVAILABLE=0" >> $GITHUB_ENV
        fi

    # instructions taken from
    # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development#add-a-step-to-your-workflow
    - name: Build (MacOS) - Load & Sign
      shell: bash -el {0}
      # We only sign pushes to main, nightlies, RCs and final releases
      if: runner.os == 'macOS' && env.I2I_FILE_AVAILABLE && env.SIGNING_SECRETS_AVAILABLE
      run: |
        # create variables
        INSTALLER_CERTIFICATE_PATH="$RUNNER_TEMP/installer_developer_cert.p12"
        APPLICATION_CERTIFICATE_PATH="$RUNNER_TEMP/application_developer_cert.p12"
        KEYCHAIN_PATH="$RUNNER_TEMP/installer-signing.keychain-db"

        # import certificate and provisioning profile from secrets
        echo -n "${{ secrets.APPLE_INSTALLER_CERTIFICATE_BASE64 }}" | /usr/bin/base64 --decode > $INSTALLER_CERTIFICATE_PATH
        echo -n "${{ secrets.APPLE_APPLICATION_CERTIFICATE_BASE64 }}" | /usr/bin/base64 --decode > $APPLICATION_CERTIFICATE_PATH

        # create temporary keychain
        security create-keychain -p "${{ secrets.TEMP_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "${{ secrets.TEMP_KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $INSTALLER_CERTIFICATE_PATH -P ${{ secrets.APPLE_INSTALLER_CERTIFICATE_PASSWORD }} -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security import $APPLICATION_CERTIFICATE_PATH -P ${{ secrets.APPLE_INSTALLER_CERTIFICATE_PASSWORD }} -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # export identity name
        dev_id_installer_identity=$(security find-identity $KEYCHAIN_PATH | grep -m 1 -o '"Developer ID Installer.*"' | tr -d '"')
        dev_id_app_identity=$(security find-identity $KEYCHAIN_PATH | grep -m 1 -o '"Developer ID Application.*"' | tr -d '"')

        # codesign the app
        codesign --verbose=4 --deep --force --options=runtime --entitlements ./package/macos-pyinstaller/entitlements.plist --timestamp --sign "${dev_id_app_identity}" ./dist/image2image.app
        # codesign --verbose=4 --deep --force --options=runtime --entitlements ./package/macos-pyinstaller/entitlements.plist --timestamp --sign "${dev_id_app_identity}" ./dist/image2image.app

    - name: Build (MacOS) - Package
      if: matrix.os == 'macos-latest'
      env:
        # See https://keith.github.io/xcode-man-pages/notarytool.1.html for auth options
        APPLE_NOTARIZATION_USERNAME: ${{ secrets.APPLE_NOTARIZATION_USERNAME }}
        # This needs to be an application-specific password
        APPLE_NOTARIZATION_PASSWORD: ${{ secrets.APPLE_NOTARIZATION_PASSWORD }}
        # 10 alphanumeric characters available in the AppleID UI
        APPLE_NOTARIZATION_TEAM_ID: ${{ secrets.APPLE_NOTARIZATION_TEAM_ID }}
      run: |
        set -euxo pipefail
        
        # create a disk image
        mkdir -p dist/dmg
        
        # Move app to dmg folder
        mv dist/image2image.app dist/dmg
        
        # Create the DMG
        # Ensure you have 'create-dmg' installed. If not, install using 'brew install create-dmg'
        create-dmg \
          --volname "image2image" \
          --volicon "src/image2image/assets/icon.ico" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "image2image.app" 175 120 \
          --hide-extension "image2image.app" \
          --app-drop-link 425 120 \
          "dist/image2image.dmg" \
          "dist/dmg/"
        
        # link the app to the Applications folder
        # ln -s /Applications dist/dmg/Applications
        # mv dist/image2image.app dist/dmg
        # create dmg file
        # hdiutil create -volname "image2image" -srcfolder ./dist/dmg -ov -format UDZO ./dist/image2image.dmg
        
        # rename file
        python scripts/package_app_macos_rename.py
        
        # update filename
        I2I_PACKAGE_PATH=$(python -c 'from pathlib import Path; print(str(list((Path.cwd() / "dist").glob("image2image*.dmg"))[0]))')
        echo "I2I_PACKAGE_PATH=I2I_PACKAGE_PATH" >> $GITHUB_ENV
        I2I_PACKAGE_NAME=$(python -c 'from pathlib import Path; print(list((Path.cwd() / "dist").glob("image2image*.dmg"))[0].name)')
        echo "I2I_PACKAGE_NAME=$I2I_PACKAGE_NAME" >> $GITHUB_ENV
        
        # Submit for notarization to Apple servers
        json_output_file="$RUNNER_TEMP/image2image.notarization.json"

        set +e
        xcrun notarytool submit "$I2I_PACKAGE_PATH" \
          --apple-id "$APPLE_NOTARIZATION_USERNAME" \
          --password "$APPLE_NOTARIZATION_PASSWORD" \
          --team-id "$APPLE_NOTARIZATION_TEAM_ID" \
          --output-format json \
          --wait \
          --timeout 30m \
          --verbose \
          | tee "$json_output_file"
        notary_exit_code=$?
        set -e
        if [[ $notary_exit_code != 0 ]]; then
          submission_id=$(jq -r '.id' "$json_output_file")
          xcrun notarytool log "$submission_id" \
            --apple-id "$APPLE_NOTARIZATION_USERNAME" \
            --password "$APPLE_NOTARIZATION_PASSWORD" \
            --team-id "$APPLE_NOTARIZATION_TEAM_ID"
            --verbose
          exit $notary_exit_code
        fi

        # Staple
        xcrun stapler staple --verbose "$I2I_PACKAGE_PATH"

        # Check notarization status
        spctl --assess -vv --type install "$I2I_PACKAGE_PATH" 2>&1 | tee /dev/stderr | grep accepted
        
    - name: Check filename availability
      shell: bash
      run: |
        if [ -n '${{ env.I2I_PACKAGE_NAME }}' ]; then
            echo "I2I_FILENAME_AVAILABLE=1" >> $GITHUB_ENV
        fi

    - uses: actions/upload-artifact@v4
      if: success() && env.I2I_FILENAME_AVAILABLE == '1'
      with:
        compression-level: 0  # no compression
        name: '${{ env.I2I_PACKAGE_NAME }}'
        path: |
          dist/image2image*.zip
          dist/image2image*.dmg
          dist/image2image*.tar.gz
          

  test:
    name: Test
    uses: pyapp-kit/workflows/.github/workflows/test-pyrepo.yml@v2
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}
    with:
      os: ${{ matrix.platform }}
      python-version: ${{ matrix.python-version }}
      qt: ${{ matrix.backend }}
      pip-install-pre-release: ${{ github.event_name == 'schedule' }}
      extras: 'test,2d'
      coverage-upload: artifact
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        backend: [pyqt5, pyside2, pyqt6]
        exclude:
          # Abort (core dumped) on linux pyqt6, unknown reason
          - platform: ubuntu-latest
            backend: pyqt6
          # lack of wheels for pyside2 on MacOS
          - platform: macos-latest
            backend: pyside2
          # lack of wheels for pyside2/py3.11
          - python-version: "3.9"
            backend: pyside2
          - python-version: "3.10"
            backend: pyside2
          - python-version: "3.11"
            backend: pyside2
          - python-version: "3.12"
            backend: pyside2
          - python-version: "3.12"
            backend: pyqt5
          # dask/xarray issues
          - python-version: "3.12"
            backend: pyqt6
            platform: macos-latest
          - python-version: "3.12"
            backend: pyqt6
            platform: windows-latest
          - python-version: "3.12"
            backend: pyside6
            platform: windows-latest
          # super slow
          - python-version: "3.13"
            backend: pyqt6
            platform: windows-latest
        include:
#          - python-version: "3.13"
#            platform: windows-latest
#            backend: "pyqt6"
#          - python-version: "3.13"
#            platform: ubuntu-latest
#            backend: "pyqt6"
          - python-version: "3.10"
            platform: macos-latest
            backend: "'pyside6<6.8'"
          - python-version: "3.11"
            platform: macos-latest
            backend: "'pyside6<6.8'"
          - python-version: "3.10"
            platform: windows-latest
            backend: "'pyside6<6.8'"
          # legacy Qt
          - python-version: 3.9
            platform: ubuntu-latest
            backend: "pyqt5==5.12.*"
          - python-version: 3.9
            platform: ubuntu-latest
            backend: "pyqt5==5.13.*"
          - python-version: 3.9
            platform: ubuntu-latest
            backend: "pyqt5==5.14.*"

  # now add another job to combine and upload the coverage
  upload_coverage:
    if: always()
    needs: [test]
    uses: pyapp-kit/workflows/.github/workflows/upload-coverage.yml@v2
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}

  # before we submit to PyPi, let's test that it gets built correctly and we can submit to TestPyPi
  deploy_test:
    name: Deploy to PyPI (test)
    needs: [test, check-manifest]
    if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: install
        run: |
          git tag
          python -m pip install --upgrade pip
          pip install -U pip build twine
          python -m build
          twine check dist/*
          ls -lh dist

      - name: Build and publish
        run: twine upload --repository testpypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}

  deploy:
    name: Deploy
    needs: deploy_test
    if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: install
        run: |
          git tag
          pip install -U pip build twine
          python -m build
          twine check dist/*
          ls -lh dist

      - name: Build and publish
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true