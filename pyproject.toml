[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.sdist]
include = ["src", "tests", "CHANGELOG.md"]

# https://peps.python.org/pep-0621/
[project]
name = "image2image"
description = "Image visualization and registration app."
readme = "README.md"
requires-python = ">=3.9"
license = { text = "BSD 3-Clause License" }
authors = [
    { email = "lukas.migas@yahoo.com", name = "Lukasz G. Migas" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: X11 Applications :: Qt",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Utilities",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
]
dynamic = ["version"]
dependencies = [
    "qtpy",
    "napari==0.5.6",
    "toml",
    "qtconsole>=4.5.1,!=4.7.6,!=5.4.2",
    "ipykernel>=5.2.0",
    "sentry_sdk>2",
    "lxml==4.9.2; python_version < '3.12'",
    "lxml==5.4.0; python_version >= '3.12'",
    "rasterio",
    "pandas<2",
    "numpy<2",
    "pydantic>=2",
    "glasbey",
    "qtextra",
    "qtextraplot",
    "image2image-io",
    "image2image-reg",
]



# extras
# https://peps.python.org/pep-0621/#dependencies-optional-dependencies
[project.optional-dependencies]
test = ["pytest>=6.0", "pytest-cov", "pytest-qt"]
pyside2 = ["pyside2"]
pyside6 = ["pyside6"]
pyqt5 = ["pyqt5"]
pyqt6 = ["pyqt6"]
dev = [
    "ipython",
    "mypy",
    "pdbpp",
    "pre-commit",
    "rich",
    "ruff",
    "image2image[test]",
    "qtreload"
]

[project.urls]
homepage = "https://github.com/vandeplaslab/image2image"
repository = "https://github.com/vandeplaslab/image2image"

 # same as console_scripts entry point
[project.scripts]
image2image = "image2image.cli:cli"
i2i = "image2image.cli:cli"
i2viewer = "image2image.cli:cli_viewer"
i2crop = "image2image.cli:cli_crop"
i2convert = "image2image.cli:cli_convert"
i2elastix = "image2image.cli:cli_elastix"
i2register = "image2image.cli:cli_register"


# https://github.com/charliermarsh/ruff
[tool.ruff]
line-length = 120
target-version = "py39"
src = ["src", "tests"]


# https://beta.ruff.rs/docs/rules/
[tool.ruff.lint]
select = [
    "E", "F", "W", #flake8
    "UP", # pyupgrade
    "I", # isort
    "YTT", #flake8-2020
    "TC", # flake8-type-checing
    "BLE", # flake8-blind-exception
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "G", # flake8-logging-format
    "PIE", # flake8-pie
    "COM", # flake8-commas
    "SIM", # flake8-simplify
    "INP", # flake8-no-pep420
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "TID",  # flake8-tidy-imports # replace absolutify import
    "TRY", # tryceratops
    "ICN", # flake8-import-conventions
    "RUF", # ruff specyfic rules
    "ASYNC", # flake8-async
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "LOG", # flake8-logging
    "SLOT", # flake8-slots
]
# I do this to get numpy-style docstrings AND retain
# D417 (Missing argument descriptions in the docstring)
# otherwise, see:
# https://beta.ruff.rs/docs/faq/#does-ruff-support-numpy-or-google-style-docstrings
# https://github.com/charliermarsh/ruff/issues/2606
extend-ignore = [
    "D100", # Missing docstring in public module
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "D401", # First line should be in imperative mood
    "D413", # Missing blank line after last section
    "D416", # Section name should end with a colon
    "RUF100", # Do not remove NOQA lines
    "C901", # Function is too complex
    "D301", # Use r""" if any backslashes in a docstring
    "E501", "TC001", "TC002", "TC003",
    "A003", # flake8-builtins - we have class attributes violating these rule
    "COM812", # flake8-commas - we don't like adding comma on single line of arguments
    "COM819", # conflicts with ruff-format
    "SIM117", # flake8-simplify - we some of merged with statements are not looking great with black, reanble after drop python 3.9
    "RET504", # not fixed yet https://github.com/charliermarsh/ruff/issues/2950
    "TRY003", # require implement multiple exception class
    "RUF005", # problem with numpy compatybility, see https://github.com/charliermarsh/ruff/issues/2142#issuecomment-1451038741
    "B028", # need to be fixed
    "PYI015", # it produces bad looking files (@jni opinion)
    "W191", "Q000", "Q001", "Q002", "Q003", "ISC001", # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "FA100", "FA102",  # missing __future__
    "G004", # flake8-logging-format
]

[tool.ruff.lint.per-file-ignores]
"src/image2image/readers/czi.py" = ["B018", "B007", "D417"]
"src/image2image/_sentry.py" = ["E401"]
"tests/*.py" = ["D", "S"]
"setup.py" = ["D"]
"package/*.py" = ["INP"]

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

# https://docs.astral.sh/ruff/formatter/
[tool.ruff.format]
docstring-code-format = true

# https://docs.pytest.org/en/6.2.x/customize.html
[tool.pytest.ini_options]
minversion = "8.0"
console_output_style = "count"
testpaths = ["image2image", "tests"]
filterwarnings = [
  "error:::image2image", # turn warnings from qtextra into errors
  "error:::test_.*", # turn warnings in our own tests into errors
  "ignore::DeprecationWarning:shibokensupport",
  "ignore::DeprecationWarning:ipykernel",
  "ignore:numpy.ufunc size changed:RuntimeWarning",
  "ignore:There is no current event loop:DeprecationWarning:",
]

# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.run]
source = ["src"]
omit = [
    "**/*_version.py"
]

# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError()",
]

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/"
strict = true
disallow_any_generics = false
disallow_subclassing_any = false
disallow_untyped_defs = false
disable_error_code = [
    "no-redef",
    "assignment",
    "variance"
]
show_error_codes = true
pretty = false
ignore_missing_imports = true
exclude = [
    "venv",
    "tests",
    "package",
    "build",
    "src/image2image/_version.py",
]

# # module specific overrides
# [[tool.mypy.overrides]]
# module = ["numpy.*",]
# ignore_errors = true

# https://github.com/mgedmin/check-manifest#configuration
[tool.check-manifest]
ignore = [
    ".github_changelog_generator",
    ".pre-commit-config.yaml",
    ".ruff_cache/**/*",
    "setup.py",
    "tests/**/*",
    ".idea/**/*",
    "_version.py",
    "venv*/**/*",
    "scripts/**/*",
    "scratch/**/*",
    "icon/**/*",
    "docs/**/*",
    "package/**/*",
    "tox.ini",
    "codecov.yml",
    "mkdocs.yml",
    "renovate.json",
    "docs/**/*",
    "examples/**/*",
    "MANIFEST.in",
    "Makefile",
]